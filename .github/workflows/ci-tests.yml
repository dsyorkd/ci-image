name: CI Tests

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'docker/**'
      - '.github/workflows/**'
      - 'Makefile'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'docker/**'
      - '.github/workflows/**'
      - 'Makefile'

jobs:
  # Build and test base image first
  test-base-image:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build base image
        run: |
          echo "Building ci-base image..."
          docker build -t test-ci-base docker/ci-base

      - name: Test base image functionality
        run: |
          echo "Testing ci-base functionality..."
          docker run --rm test-ci-base echo "Container startup test passed"
          docker run --rm test-ci-base which git
          docker run --rm test-ci-base which curl

      - name: Save base image for dependent jobs
        run: |
          echo "Saving base image as tarball..."
          docker save test-ci-base | gzip > ci-base-image.tar.gz

      - name: Upload base image artifact
        uses: actions/upload-artifact@v4
        with:
          name: ci-base-image
          path: ci-base-image.tar.gz
          retention-days: 1

  # Test dependent images that extend ci-base
  test-dependent-images:
    runs-on: ubuntu-latest
    needs: test-base-image
    strategy:
      matrix:
        image: [ci-npm, ci-go, ci-go-npm]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Download base image artifact
        uses: actions/download-artifact@v5
        with:
          name: ci-base-image

      - name: Load base image
        run: |
          echo "Loading base image..."
          docker load < ci-base-image.tar.gz
          # Tag it as the expected registry path for Dockerfile FROM statements
          docker tag test-ci-base ghcr.io/spenceryork/ci-image/ci-base:v1.0

      - name: Test Docker build
        run: |
          if [ -d "docker/${{ matrix.image }}" ]; then
            echo "Testing build for ${{ matrix.image }}"
            docker build -t test-${{ matrix.image }} docker/${{ matrix.image }}
          else
            echo "Skipping ${{ matrix.image }} - directory not found"
          fi

      - name: Test image functionality
        run: |
          if docker images | grep -q "test-${{ matrix.image }}"; then
            echo "Running functionality tests for ${{ matrix.image }}"
            
            # Basic container start test
            docker run --rm test-${{ matrix.image }} echo "Container startup test passed"
            
            # Test specific image functionality
            case "${{ matrix.image }}" in
              "ci-npm")
                docker run --rm test-${{ matrix.image }} node --version
                docker run --rm test-${{ matrix.image }} npm --version
                docker run --rm test-${{ matrix.image }} tsc --version
                ;;
              "ci-go")
                docker run --rm test-${{ matrix.image }} go version
                docker run --rm test-${{ matrix.image }} golangci-lint version
                ;;
              "ci-go-npm")
                docker run --rm test-${{ matrix.image }} go version
                docker run --rm test-${{ matrix.image }} node --version
                docker run --rm test-${{ matrix.image }} npm --version
                docker run --rm test-${{ matrix.image }} tsc --version
                ;;
            esac
          fi

  # Test standalone images that don't depend on ci-base
  test-standalone-images:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        image: [ci-python, ci-security]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Test Docker build
        run: |
          if [ -d "docker/${{ matrix.image }}" ]; then
            echo "Testing build for ${{ matrix.image }}"
            docker build -t test-${{ matrix.image }} docker/${{ matrix.image }}
          else
            echo "Skipping ${{ matrix.image }} - directory not found"
          fi

      - name: Test image functionality
        run: |
          if docker images | grep -q "test-${{ matrix.image }}"; then
            echo "Running functionality tests for ${{ matrix.image }}"
            
            # Basic container start test
            docker run --rm test-${{ matrix.image }} echo "Container startup test passed"
            
            # Test specific image functionality
            case "${{ matrix.image }}" in
              "ci-python")
                docker run --rm test-${{ matrix.image }} python --version
                docker run --rm test-${{ matrix.image }} pip --version
                ;;
              "ci-security")
                docker run --rm test-${{ matrix.image }} which trivy || echo "Trivy not found, skipping"
                ;;
            esac
          fi

  validate-workflows:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Validate GitHub Actions workflows
        run: |
          echo "Validating workflow syntax..."
          
          # Check for required workflow files
          required_workflows=("build-images.yml" "failure-handler.yml")
          
          for workflow in "${required_workflows[@]}"; do
            if [ ! -f ".github/workflows/$workflow" ]; then
              echo "::error::Missing required workflow: $workflow"
              exit 1
            fi
            echo "✅ Found: $workflow"
          done

      - name: Check Dockerfile syntax
        run: |
          echo "Checking Dockerfile syntax..."
          
          find docker -name "Dockerfile*" -type f | while read dockerfile; do
            echo "Checking: $dockerfile"
            # Basic syntax validation
            docker run --rm -i hadolint/hadolint < "$dockerfile" || echo "Hadolint check failed for $dockerfile"
          done

  lint-and-security:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Run general security checks
        run: |
          echo "Running security checks..."
          
          # Check for secrets in files
          if grep -r -i -E "(password|secret|key|token)" --exclude-dir=.git --exclude="*.yml" --exclude="*.yaml" .; then
            echo "::warning::Potential secrets found in code. Please review."
          fi
          
          # Check for proper .dockerignore
          if [ ! -f ".dockerignore" ]; then
            echo "::warning::.dockerignore not found. Consider adding one for better Docker builds."
          fi

      - name: Validate Task Master configuration
        run: |
          if [ -f ".taskmaster/tasks/tasks.json" ]; then
            echo "✅ Task Master configuration found"
            
            # Basic JSON validation
            if command -v jq > /dev/null; then
              jq empty .taskmaster/tasks/tasks.json
              echo "✅ Task Master JSON is valid"
            fi
          else
            echo "::notice::Task Master not initialized yet"
          fi